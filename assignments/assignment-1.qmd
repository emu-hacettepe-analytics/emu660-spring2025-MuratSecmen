---
title: "Assignment 1"
---

## **(a)** Video Summary:

[Veri Bilimi ve Endüstri Mühendisliği Üzerine Sohbetler - Baykal Hafızoğlu & Erdi Daşdemir](https://www.youtube.com/watch?v=tV_0pHSdLAM)

Dr. Baykal Hafızoğlu, an expert in analytics and optimization, discusses analytics methods ranging from descriptive to prescriptive analytics. Drawing from his Operations Research expertise and industry experience, he highlights the importance of clear problem definitions, actionable KPIs, and user-friendly solutions. Dr. Hafızoğlu emphasizes the strategic, tactical, and operational applications of prescriptive methods like optimization and heuristics. He concludes by stressing the critical role of user feedback, early prototyping, and effective deployment in ensuring analytics solutions deliver practical, real-world value.

## (b) Explore Statistical Summaries with Custom Functions and Iteration Methods:

```{r}
# mtcars datasetini yükle (built-in)
data(mtcars)

# mtcars'ın ilk 5 satırını gör
head(mtcars, 5)

```

-   **Write a Custom Summary Function:**

    ```{r}
    # compute_stats function

    compute_stats <- function(x) {
      # input numeric control
      if (!is.numeric(x)) {
        stop("Input must be a numeric vector.")
      }
      
      # statistical calculations
      mean_x   <- mean(x)
      median_x <- median(x)
      var_x    <- var(x)
      iqr_x    <- IQR(x)
      min_x    <- min(x)
      max_x    <- max(x)
      
      # list results
      stats_list <- list(
        mean      = mean_x,
        median    = median_x,
        variance  = var_x,
        iqr       = iqr_x,
        minimum   = min_x,
        maximum   = max_x
      )
      
      return(stats_list)
    }

    # Sample function: mtcars dataset mpg column statistics 
    data(mtcars)
    compute_stats(mtcars$mpg)
    ```

-   **Applying the Function Using a Loop:**

    ```{r}
    # Veri setini yükle
    data(mtcars)

    # Her sütun için döngü ile compute_stats fonksiyonunu çalıştır
    for (col_name in names(mtcars)) {
      
      # Sütunun sayısal olup olmadığını kontrol et
      if (is.numeric(mtcars[[col_name]])) {
        
        # Fonksiyonu uygula
        stats <- compute_stats(mtcars[[col_name]])
        
        # Sütun adını ve istatistikleri yazdır
        cat("Column:", col_name, "\n")
        print(stats)
        cat("\n")  # Araya boşluk ekler
      }
    }
    ```

-   **An alternative approach with sapply and apply:**

    ```{r}
    # sapply ile tüm sütunlara compute_stats fonksiyonunu uygula
    stats_sapply <- sapply(mtcars, compute_stats)

    # sonuçları yazdır
    stats_sapply

    ```

    ```{r}
    # veriyi matrise dönüştür
    mtcars_mat <- as.matrix(mtcars)

    # apply fonksiyonunu sütunlara uygula (margin = 2)
    stats_apply <- apply(mtcars_mat, 2, compute_stats)

    # sonucu yazdır
    stats_apply

    ```

## (c) Load the “na_example” dataset from the dslabs package:

```{r}
# Load the dslabs package and the na_example dataset
library(dslabs)
data("na_example")

# Display the dataset's contents (including NA values)
cat("Original na_example dataset:\n")
```

-   Display the dataset’s contents on your webpage, including any NA (missing) values present.

    ```{r}
    print(na_example)
    ```

-   Report the total count of NA values found within the dataset and the index positions of all NA values in the dataset.

    ```{r}
    na_count <- sum(is.na(na_example))
    na_positions <- which(is.na(na_example))
    cat("\nTotal count of NA values:", na_count, "\n")
    ```

    ```{r}
    cat("Index positions of NA values:", na_positions, "\n")
    ```

-   Compute and display the mean and standard deviation of the dataset before handling missing values (ignore NAs in calculations).

    ```{r}
    original_mean <- mean(na_example, na.rm = TRUE)
    original_sd <- sd(na_example, na.rm = TRUE)
    cat("\nOriginal dataset (ignoring NAs):\n")
    ```

    ```{r}
    cat("Mean:", original_mean, "\n")
    ```

    ```{r}
    cat("Standard deviation:", original_sd, "\n")
    ```

-   Handling Missing Values- create two modified versions of the dataset:

    -   Version 1: Replace all NA values with the median of the non-missing values.

    -   Version 2: Replace all NA values with a randomly selected non-missing value from the dataset.

    ```{r}
    # Version 1: Replace NA values with the median of non-missing values
    median_value <- median(na_example, na.rm = TRUE)
    version1 <- na_example
    version1[is.na(version1)] <- median_value

    # Version 2: Replace NA values with a randomly selected non-missing value
    non_missing <- na_example[!is.na(na_example)]
    random_values <- sample(non_missing, size = na_count, replace = TRUE)
    version2 <- na_example
    version2[is.na(version2)] <- random_values

    # Compute mean and standard deviation for both modified versions
    version1_mean <- mean(version1)
    version1_sd <- sd(version1)
    version2_mean <- mean(version2)
    version2_sd <- sd(version2)

    # Display results for Version 1
    cat("\nVersion 1 (NA replaced with median):\n")
    ```

    ```{r}
    cat("Mean:", version1_mean, "\n")
    ```

    ```{r}
    cat("Standard deviation:", version1_sd, "\n")
    ```

    ```{r}
    # Display results for Version 2
    cat("\nVersion 2 (NA replaced with random values):\n")
    ```

    ```{r}
    cat("Mean:", version2_mean, "\n")
    ```

    ```{r}
    cat("Standard deviation:", version2_sd, "\n")
    ```

-   Compare the Results:

    ```{r}
    cat("Original Mean (ignoring NAs):", original_mean, " | SD:", original_sd, "\n")
    ```

    ```{r}
    cat("Version 1 Mean (median fill):", version1_mean, " | SD:", version1_sd, "\n")
    ```

    ```{r}
    cat("Version 2 Mean (random fill):", version2_mean, " | SD:", version2_sd, "\n")
    ```

**Explanation:**

The `na_example` dataset consists of numeric values with some missing entries (NAs).

1.  In Version 1, replacing missing values with the median helps *preserve the dataset’s central tendency (mean and median)*, but it tends to reduce the overall variability, since the same value is repeatedly used to fill gaps—leading to a lower standard deviation.

2.  In Version 2, filling in missing values with randomly selected observed values helps *maintain the dataset’s natural spread and variation*, resulting in a standard deviation closer to the original. However, this approach can slightly shift the mean depending on the random values inserted.

Therefore, if the goal is to preserve data variability, **Version 2** is more suitable. On the other hand, if consistency around the center of the data is more important, **Version 1** would be the better choice.
